<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solution Strategy on adesso docs site</title>
    <link>http://example.org/04_solutionstrategy/</link>
    <description>Recent content in Solution Strategy on adesso docs site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/04_solutionstrategy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>http://example.org/04_solutionstrategy/01_introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/04_solutionstrategy/01_introduction/</guid>
      <description>4.1 Introduction to the Strategy The following table contrasts the quality goals of DokChess (→ Section 1.2) with matching architecture approaches and thus provides easy access to the solution.
Quality Goal Matching approaches in the solution Accessible example (Analysability) architectural overview structured by arc42explicit, object-oriented domain modeldetailed documentation of public interfaces with Javadoc Platform appealing to experiments (Changeability) widely spread programming language Java → (a)Interfaces for core abstractions (for instance: position evaluation, game rules)immutable objects (position, move, &amp;hellip; ) make implementation of many algorithms easier&amp;ldquo;plugging&amp;rdquo; of elements with dependency injection leads to interchangeability → (b)High test coverage as a safety net Using existing frontends (Interoperability) Use of the common communication protocol XBoard, → (c)Use of portable Java → (a) Acceptable playing strength (Attractiveness) Integration of chess opening book libraries → (d)implementation of minimax algorithm and a proper position evaluation → (e)Integration tests with chess problems for tactics and mate positions Quick response to opponent&amp;rsquo;s moves (Efficiency) Reactive extensions for concurrent calculation with newly found better moves as events → (f) Optimization of minimax by alpha-beta pruning → (e) Efficient domain model implementationIntegration tests with time limits Small letters in brackets, e.</description>
    </item>
    
    <item>
      <title>Structure</title>
      <link>http://example.org/04_solutionstrategy/02_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/04_solutionstrategy/02_structure/</guid>
      <description>4.2 Structure of DokChess DokChess is implemented as a Java program with a main routine. It is roughly split into the following parts:
An implementation of the rules of chess The engine itself, which selects the moves The connection to a graphical user interface via the XBoard protocol An adapter for a specific opening book format (Polyglot Opening Book) This decomposition allows you to replace things such as the communication protocol or the opening book format if necessary.</description>
    </item>
    
    <item>
      <title>Game Strategy</title>
      <link>http://example.org/04_solutionstrategy/03_gamestrategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/04_solutionstrategy/03_gamestrategy/</guid>
      <description>4.3 Game Strategy For the integration of opening libraries, the &amp;ldquo;Polyglot Opening Book&amp;rdquo; file format was implemented (→ Building Block View 5.5 &amp;ldquo;Subsystem Opening (Blackbox)&amp;rdquo;). This way, DokChess responds with profound chess knowledge in the beginning of a game.
The classic minimax algorithm with a fixed search depth in the game tree is responsible for the strategy as the game continues. Its basic implementation is single-threaded. The evaluation of a position at an end node in the game tree is based solely on the material (→ 5.</description>
    </item>
    
    <item>
      <title>Connection</title>
      <link>http://example.org/04_solutionstrategy/03_connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/04_solutionstrategy/03_connection/</guid>
      <description>4.4 The Connection of the Engine DokChess has no graphical user interface. Instead communication takes place via standard input and output. The text-based XBoard acts as a communication protocol (→ Decision 9.1 &amp;ldquo;How does the engine communicate with the outside world?&amp;rdquo;). You can use DokChess interactively with the command line if you know the XBoard commands and are able to interpret the engine responses (→ Concept 8.3 User Interface). See image below:</description>
    </item>
    
  </channel>
</rss>
